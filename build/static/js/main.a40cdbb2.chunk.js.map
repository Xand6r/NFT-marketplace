{"version":3,"sources":["config/index.js","utils/pinata.js","utils/interact.js","assets/metamask.svg","assets/ethereum.svg","Minter.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["require","config","CONFIG","REACT_APP_ALCHEMY_KEY","process","PINATA_KEY","PINATA_SECRET","ALCHEMY_KEY","PINATA_URL","CONTRACT_ADDRESS","CONTRACT_ABI","MAX_FILESIZE","key","secret","pinFileToIPFS","file","a","data","FormData","append","axios","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","IpfsHash","catch","error","console","log","alert","message","alchemyKey","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","addWalletListener","setWallet","setStatus","on","accounts","mintNFT","tokenURI","trim","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Dragger","Upload","Minter","props","useState","walletAddress","url","setURL","uploading","setUploading","mintingNFT","setMintingNFT","inputProps","name","multiple","beforeUpload","disabled","customRequest","fileSize","size","sizeMB","toFixed","err","finally","useEffect","connectWalletPressed","onMintPressed","walletButtomClass","className","id","onClick","src","MetaMask","String","substring","spinning","tip","height","type","EthereumIcon","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a40cdbb2.chunk.js","sourcesContent":["/**\n * @description Create a file who's purpose is simply to load and export env variables and export them\n */\nrequire(\"dotenv\").config();\n\nconst CONFIG = {\n    REACT_APP_ALCHEMY_KEY: process.env.REACT_APP_ALCHEMY_KEY,\n    PINATA_KEY: process.env.REACT_APP_PINATA_KEY,\n    PINATA_SECRET: process.env.REACT_APP_PINATA_SECRET,\n    ALCHEMY_KEY: process.env.REACT_APP_ALCHEMY_KEY,\n    PINATA_URL: \"https://gateway.pinata.cloud/ipfs/\",\n    CONTRACT_ADDRESS: \"0x23F078680AF893fb305100379e87261De649b821\",\n    CONTRACT_ABI: require('./contract-abi.json'),\n    MAX_FILESIZE: 5 //MAXIMUM FILE SIZE in MB\n}\n\nexport default CONFIG;","import axios from 'axios';\nimport CONFIG from '../config';\n\nconst key = CONFIG.PINATA_KEY;\nconst secret = CONFIG.PINATA_SECRET;\n\n/**\n * A utility function to convert size to bytes\n * @param {*} sizeInBytes \n */\nexport const convertToMB = (sizeInBytes) => {\n    return (sizeInBytes/1000000).toFixed(2);\n}\n\n/**\n * @description upload file to ipfs using pinata\n * @params { String } file the file we wish to upload\n */\nexport const pinFileToIPFS = async(file) => {\n    const pinUrl = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n    let data = new FormData();\n    data.append('file', file.file);\n    // emp1.uid\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(pinUrl, data, {\n            maxBodyLength: 'Infinity',\n            headers: {\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataUrl: CONFIG.PINATA_URL + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            alert('err')\n            return {\n                success: false,\n                message: error.message,\n            }\n           \n    });\n};\nexport const pinJSONToIPFS = async(JSONBody) => {\n    const pinUrl = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios \n        .post(pinUrl, JSONBody, {\n            headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataUrl: CONFIG.PINATA_URL + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n           \n    });\n};","import React from \"react\";\nimport CONFIG from \"../config/index.js\";\nimport { pinJSONToIPFS } from \"./pinata.js\";\n\n\nconst alchemyKey = CONFIG.ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = CONFIG.CONTRACT_ABI;\nconst contractAddress = CONFIG.CONTRACT_ADDRESS;\n\n/**\n * Contains an helpoer function who's purpose is to connect a wallet to the DAPP\n * @returns {{address: String, status: JSX}}\n */\nexport const connectWallet = async () => {\n  // if metamask is present\n  if (window.ethereum) {\n    // try connecting to it\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Upload the image you want to convert to an NFT.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      //   if we cannot connect to it then throw an error\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    // otherwise it means metamask isnt installed at all\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\n/**\n * immediately our app loads up, we would want to check if we already have an existing connection to our wallet\n * @returns\n */\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Upload the image you want to convert to an NFT\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask on !ROPSTEN! using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\n/**\n * Function to check if the current active wallet in meta mask has been changed\n * @param {React.useState} setWallet a react function to set the wallet\n * @param {React.useState} setStatus a react function to update the status of the dapp\n */\nexport function addWalletListener(setWallet, setStatus) {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0]);\n        setStatus(\"👆🏽 Upload the image you want to convert to an NFT\");\n      } else {\n        setWallet(\"\");\n        setStatus(\"🦊 Connect to Metamask on !ROPSTEN! using the top right button.\");\n      }\n    });\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊{\" \"}\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install Metamask, a virtual Ethereum wallet, in your browser.\n        </a>\n      </p>\n    );\n  }\n}\n\n/**\n * An async function to pin the content of our upload to IPFS\n * @param {String} url t\n * @param {String} name\n * @param {String} description\n */\n export const mintNFT = async(tokenURI) => {\n    \n  //error handling\n  if (tokenURI.trim() == \"\") { \n      return {\n          success: false,\n          status: \"❗Please make sure URL are completed before minting.\",\n      }\n  }\n  //load smart contract\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\n\n  //set up your Ethereum transaction\n  const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: window.ethereum.selectedAddress, // must match user's active address.\n      'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \n  };\n\n  //sign transaction via Metamask\n  try {\n      const txHash = await window.ethereum\n          .request({\n              method: 'eth_sendTransaction',\n              params: [transactionParameters],\n          });\n      return {\n          success: true,\n          status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n      }\n  } catch (error) {\n      return {\n          success: false,\n          status: \"😥 Something went wrong: \" + error.message\n      }\n  }\n}\n","export default __webpack_public_path__ + \"static/media/metamask.45038d58.svg\";","export default __webpack_public_path__ + \"static/media/ethereum.66aaf827.svg\";","import { useEffect, useState } from \"react\";\nimport { Upload, message, Alert, Image, Spin, Button } from \"antd\";\n\nimport {\n  connectWallet,\n  mintNFT,\n  getCurrentWalletConnected,\n  addWalletListener,\n} from \"./utils/interact\";\nimport \"antd/dist/antd.css\";\n\nimport MetaMask from \"./assets/metamask.svg\";\nimport EthereumIcon from \"./assets/ethereum.svg\";\nimport { pinFileToIPFS, convertToMB } from \"./utils/pinata\";\nimport CONFIG from \"./config\";\n\nconst { Dragger } = Upload;\n\nconst Minter = (props) => {\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n  const [mintingNFT, setMintingNFT] = useState(false);\n\n  /**\n   * Define the props to use to upload our files\n   */\n  const inputProps = {\n    name: \"file\",\n    multiple: false,\n    beforeUpload: (file) => {\n      message.success(\"uploading files, please hold on!\");\n    },\n    disabled: uploading,\n    customRequest: (file) => {\n      const fileSize = file.file.size;\n      const sizeMB = convertToMB(fileSize);\n      setUploading(true);\n      // add confirmation to prevent really large files\n      if (sizeMB > CONFIG.MAX_FILESIZE) {\n        return message.error(\"Please upload a maximum file size of 5MB!\");\n      }\n      return pinFileToIPFS(file)\n        .then((data) => {\n          setURL(data.pinataUrl);\n          setStatus(\"🦊 Image Uploaded, proceed to mint your NTF\");\n          message.success(`file uploaded successfully.`);\n        })\n        .catch((err) => {\n          message.error(\"There was an error\", err.message);\n        })\n        .finally(() => {\n          setUploading(false);\n        });\n    },\n  };\n\n  /**\n   * immediately our app loads up, check if there is an active function\n   */\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    // add a listener too for when wallet info changes\n    addWalletListener(setWallet, setStatus);\n  }, []);\n\n  /**\n   * @description When we press the buttont o connect our wallet, run this function\n   */\n  const connectWalletPressed = async () => {\n    const { status, address } = await connectWallet();\n    setStatus(status);\n    setWallet(address);\n  };\n  /**\n   * Function to mint the NFT image from the url we have\n   */\n  const onMintPressed = async () => {\n    setMintingNFT(true);\n    try {\n      const { status } = await mintNFT(url);\n      message.success(\"sucesfully minted image as NFT, check it out on etherscan\")\n      setStatus(status);\n      // reset the state\n      setURL(\"\");\n    } catch (err) {\n      message.error(\"There was an error minting your NFT, Please connect your wallet first\");\n      // try connecting their wallet for them\n      connectWalletPressed();\n    } finally {\n      setMintingNFT(false);\n    }\n    // setStatus(status);\n  };\n\n  const formatAddress = () =>\n    \"Connected: \" +\n    String(walletAddress).substring(0, 6) +\n    \"...\" +\n    String(walletAddress).substring(38);\n\n  const walletButtomClass = walletAddress ? \"--active\" : \"\";\n\n  return (\n    <div className=\"Minter\">\n      {/* header section */}\n      <div className=\"Minter__header\">\n        <div>\n          <div className=\"Minter__header__title\">🧙‍♂️ Xander NFT Minter</div>\n          <p>\n            Simply upload your asset, then press\n            \"Mint.\" and then HODL tight.\n          </p>\n        </div>\n        <button\n          id=\"walletButton\"\n          className={walletButtomClass}\n          onClick={connectWalletPressed}\n        >\n          <img src={MetaMask} />\n          {walletAddress.length > 0 ? (\n            formatAddress()\n          ) : (\n            <span>Connect Wallet</span>\n          )}\n        </button>\n      </div>\n\n      <div className=\"Minter__body\">\n        {!url ? (\n          <div id=\"uploadsection\">\n            <Spin spinning={uploading} tip=\"Uploading image,HODL tight...\">\n              <Dragger {...inputProps}>\n                <p className=\"ant-upload-drag-icon\">\n                  <img\n                    src={EthereumIcon}\n                    id=\"ethereum-icon\"\n                    alt=\"ethereum-icon\"\n                  />\n                </p>\n                <p className=\"ant-upload-text\">\n                  Click or drag file to this area to upload\n                </p>\n                <p className=\"ant-upload-hint\">\n                  Support for a single or bulk upload. Strictly prohibit from\n                  uploading company data or other band files\n                </p>\n              </Dragger>\n            </Spin>\n          </div>\n        ) : (\n          <div className=\"uploadedimage-wrapper\">\n            <Spin spinning={mintingNFT} tip=\"Minting NFT,HODL tight...\">\n              <Image height={400} src={url} />\n            </Spin>\n\n            <div className=\"mint-nft\">\n              <Button\n                disabled={mintingNFT}\n                type=\"primary\"\n                size=\"large\"\n                onClick={onMintPressed}\n              >\n                {mintingNFT ? \"Minting NFT\" : \"💥 Mint Image as NFT 💥\"}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n      <Alert message={status} />\n    </div>\n  );\n};\n\nexport default Minter;\n","import Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}